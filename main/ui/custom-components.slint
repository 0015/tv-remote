
import { ChannelButtonData } from "custom-component-data.slint";
import { RemoteScreenID } from "remote-screens-index.slint";
import { Symbols } from "symbols.slint";


export global Logic { //container for functions to interact with c++ from gui
    pure callback remote_btn_clicked(string, RemoteScreenID);
}


export component RemoteButton { //custom button for sending remote signals and navigating the ui
    in property <image> icon;                                   //image to show on button
    in property <string> text;                                  //text to show on button
    in property <length> font-size;
    in property <string> actionListID: "";                      //name of the "macro" to play when button is pressed
    in property <RemoteScreenID> screenID: RemoteScreenID.SAME; //the id of the screen which will be shown when this button is clicked

    Rectangle { //rectangle for the whole button shape
        background: white;

        Image { //image to display button icon
            width: root.width;
            height: root.height;
            image-fit: contain;
            source: icon;
        }

        Text {
            text: text;
            font-size: root.font-size;
        }

        if touch.pressed: Rectangle { //when the button is pressed, shade it darker for visual feedback
            background: #0000007f;
        }
        
        touch := TouchArea { //toucharea to detect when the button is being pressed
            pointer-event(event) => {
                if (event.kind == PointerEventKind.up) {
                    Logic.remote_btn_clicked(root.actionListID, root.screenID)
                }
            }
        }
    }
}


export component NavPanel { //panel with bottom navigation buttons to replicate pronto layout
    in property <string> txt_btn1: "btn1"; //text to display on 4 main buttons
    in property <string> txt_btn2: "btn2";
    in property <string> txt_btn3: "btn3";
    in property <string> txt_btn4: "btn4";

    in property <string> al_btn1; //action list id to run when each button is pressed
    in property <string> al_btn2;
    in property <string> al_btn3;
    in property <string> al_btn4;

    in property <RemoteScreenID> screen_btn1; //screen id to change to when each button is pressed
    in property <RemoteScreenID> screen_btn2;
    in property <RemoteScreenID> screen_btn3;
    in property <RemoteScreenID> screen_btn4;

    in property <string> al_navLeft; //action list id for nav buttons (e.g. for tv or recording box)
    in property <string> al_navRight;
    in property <string> al_navUp;
    in property <string> al_navDown;
    in property <string> al_ok;
    in property <string> al_return;
    
    VerticalLayout {
        spacing: 10px;

        HorizontalLayout {
            spacing: parent.spacing;
            height: 50px;

            RemoteButton {
                height: parent.height;
                text: txt_btn1;
                actionListID: al_btn1;
                screenID: screen_btn1;
            }

            RemoteButton {
                height: parent.height;
                text: txt_btn2;
                actionListID: al_btn2;
                screenID: screen_btn2;
            }

            RemoteButton {
                height: parent.height;
                text: txt_btn3;
                actionListID: al_btn3;
                screenID: screen_btn3;
            }

            RemoteButton {
                height: parent.height;
                text: txt_btn4;
                actionListID: al_btn4;
                screenID: screen_btn4;
            }
        }

        GridLayout {
            spacing: parent.spacing;

            RemoteButton {
                row: 0;
                col: 1;
                icon: Symbols.arrow-up;
                actionListID: al_navUp;
            }

            RemoteButton {
                row: 1;
                col: 0;
                icon: Symbols.arrow-left;
                actionListID: al_navLeft;
            }

            RemoteButton {
                row: 1;
                col: 1;
                text: "Ok";
                actionListID: al_ok;
            }

            RemoteButton {
                row: 1;
                col: 2;
                icon: Symbols.arrow-right;
                actionListID: al_navRight;
            }

            RemoteButton {
                row: 2;
                col: 0;
                text: "Return";
                actionListID: al_return;
            }

            RemoteButton {
                row: 2;
                col: 1;
                icon: Symbols.arrow-down;
                actionListID: al_navDown;
            }

            RemoteButton {
                row: 2;
                col: 2;
                icon: Symbols.home;
                screenID: RemoteScreenID.HOME;
            }
        }
    }
}


export component VolumePanel {
    in property <string> al_volUp: "SOUND_VOL_UP";
    in property <string> al_volDown: "SOUND_VOL_DOWN";
    in property <string> al_volMute: "SOUND_VOL_MUTE";
    in property <string> al_chanUp: "TV_CHAN_UP";
    in property <string> al_chanDown: "TV_CHAN_DOWN";

    VerticalLayout {
        spacing: 5px;

        RemoteButton {
            text: "chan+";
            actionListID: al_chanUp;
        }

        RemoteButton {
            text: "chan-";
            actionListID: al_chanDown;
        }

        RemoteButton {
            text: "mute";
            actionListID: al_volMute;
        }

        RemoteButton {
            text: "vol+";
            actionListID: al_volUp;
        }

        RemoteButton {
            text: "vol-";
            actionListID: al_volDown;
        }
    }
}


export component ChannelPanel { //panel with grid of channel buttons
    in property <int> num_cols; //how many rows and columns of buttons to fit within a sub screen
    in property <int> num_rows;
    in property <length> button_width; //how big the buttons should be
    in property <length> button_height;
    
    out property <int> numSubScreens: ceil(cbd.data.length / (num_cols * num_rows)); //how many sub screens of buttons
    
    //determine the range of button indices to display based on sub screen
    in-out property <int> currentSubScreen: 0;
    in-out property <int> iMin: currentSubScreen * num_cols * num_rows;
    in-out property <int> iMax: min(iMin + num_cols * num_rows, cbd.data.length);
    
    //calculate spacing between buttons manually, cannot use grid with for loop
    property <length> horizontal_spacing: (self.width - num_cols * button_width) / (num_cols - 1);
    property <length> vertical_spacing: (self.height - num_rows * button_height) / (num_rows - 1);

    callback setSubScreen(int);
    setSubScreen(subScreen) => {
        currentSubScreen = subScreen;
        iMin = currentSubScreen * num_cols * num_rows;
        iMax = min(iMin + num_cols * num_rows, cbd.data.length);
    }

    //load the list of channel button data (icons, actio macro names)
    cbd := ChannelButtonData {}

    //display buttons for this sub screen
    for i in (iMax - iMin):
    RemoteButton {
        x: floor(i / num_rows) * (button_width + horizontal_spacing);
        y: mod(i, num_rows) * (button_height + vertical_spacing);
        width: button_width;
        height: button_height;

        icon: cbd.data[i + iMin].icon;
        actionListID: cbd.data[i + iMin].actionListID;
    }
}